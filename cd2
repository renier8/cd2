import axios from 'axios';
import {useState} from 'react';
import './styles.css';


const App = () => {
  const [diamonds, setDiamonds] = useState([])
  
  const API_URL = 'https://intg-customer-staging.nivodaapi.net/api/diamonds';
  // For production, the API_URL is 'https://integrations.nivoda.net/api/diamonds';
  
  let authenticate_query = `{
    authenticate { 
      username_and_password(username: "testaccount@sample.com", password: "staging-nivoda-22") {
        token
      }
    }
  }
  `;
  
  (async function() {
    try {
      let authenticate_result = await axios.post(API_URL, {
        query: authenticate_query
      }, {
        headers: {
          'Content-Type': 'application/json',
        }
      });
  
      const authenticationData = authenticate_result.data.data.authenticate.username_and_password;

  
      if (!authenticationData || !authenticationData.token) {
        throw new Error('Authentication failed. Token not received.');
      }
  
      let { token } = authenticationData;

  
      let diamond_query = `
        query {
          diamonds_by_query(
            query: {
              labgrown: false,
              shapes: ["ROUND"],
              sizes: [{ from: 1, to: 1.5 }],
              has_v360: true,
              has_image: true,
              color: [D, E],
            },
            offset: 0,
            limit: 50, 
            order: { type: price, direction: ASC }
          ) {
            items {
              id
              diamond {
                id
                video
                image
                availability
                supplierStockId
                brown
                green
                milky
                eyeClean
                mine_of_origin
                certificate {
                  id
                  lab
                  shape
                  certNumber
                  cut
                  carats
                  clarity
                  polish
                  symmetry
                  color
                  width
                  length
                  depth
                  girdle
                  floInt
                  floCol
                  depthPercentage
                  table
                }
              }
              price
              discount
            }
            total_count
          }
        }
      `;

  
    try {
      let result = await axios.post(API_URL, {
        query: diamond_query
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        }
      });

      setDiamonds(result.data.data.diamonds_by_query.items)
    } catch (error) {
      console.error('Error:', error.response.data)
    }


    } catch (error) {
      console.error('An error occurred:', error.message);
    }
  })();


  console.log(diamonds)
  
  return (
    <div>
      <h1>Culture Diamonds</h1>
        <div className='diamond-grid'>
        {diamonds.map(diamond => {
          let cert = diamond.diamond.certificate

          function convertToTitleCase(inputString) {
            return inputString.charAt(0).toUpperCase() + inputString.slice(1).toLowerCase();
          }

          let measurement

          if (convertToTitleCase(cert.shape) === 'Round') {
            measurement = `${cert.length} - ${cert.width} x ${cert.depth}`
          } else {
            measurement = `${cert.length} x ${cert.width} x ${cert.depth}`
          }

          return(
            <div className='diamond-card'>
              <div className='responsive-frame'>
                <iframe src={diamond.diamond.video}></iframe>
              </div>
              <ul>
                <li>{cert.lab}: {cert.certNumber}</li>
                <li>Stock ID: {diamond.diamond.supplierStockId}</li>
              </ul>
              <h2>{convertToTitleCase(cert.shape)} {cert.carats}ct {cert.color} {cert.clarity} {cert.cut} {cert.polish} {cert.symmetry} </h2>
              <hr />
              <ul>
                <li>T:{cert.table}%</li>
                <li>D:{cert.depthPercentage}%</li>
                <li>R:{}</li>
                <li>M:{measurement}</li>
              </ul>
            </div>
          )
          
        })}
        </div>
    </div>
  )
}

export default App


body {
    margin: 0;
    padding: 0;
    background-color: #ecebeb; /* Set your desired background color */
    font-family: 'Montserrat', sans-serif;

  }
  
  #root {
    height: 100vh; /* Ensure the app takes up the full height of the viewport */
  }

.diamond-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
    justify-content: space-around;
    align-items: center;
}

.diamond-card {
    max-width: 380px;
    justify-content: center;
    padding: 2em;
    border-radius: 8px;
    background-color: white;
    box-sizing: border-box;
}

.responsive-iframe {
    width: 100%; /* Make the iframe fill the entire width of the container */
    max-width: 300px; /* Set a maximum width for the iframe (about 300px) */
  }

hr {
    color: #ecebeb;
}

ul {
    list-style: none;
    display: flex;
    padding: 0;
    justify-content: space-between;
}

li {
    margin-right: 10px;
    color: rgb(119, 119, 119);
    font-size: 0.85em;
}


    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
